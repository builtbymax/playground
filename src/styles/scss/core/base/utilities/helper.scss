//
//  Utilities: General
//  ---------------------------------------------

//  General
//  ---------------------------------------------

@mixin smoothin (
  $smoothing: antialiased, 
  $backface: hidden, 
  $blur: 0
){
  -webkit-font-smoothing: $smoothing;
  backface-visibility: $backface;
  -webkit-filter: blur($blur);
}

@mixin transition($default: all 0.3s ease-in-out){ transition: $default; }
@mixin hyphens($value: auto) { hyphens: $value; }

@mixin shadow($x, $y, $blur, $spread, $color, $inset: false) {
  @if $inset { box-shadow:inset $x $y $blur $spread $color; } 
  @else { box-shadow: $x $y $blur $spread $color; }
}

$custom-color: '';
@mixin change-custom-color($color) { $custom-color: $color; }

@mixin gradient($color-start: $background__color-4, $color-end: $background__color-6) {
  background: linear-gradient(to bottom, $color-start 0%, $color-end 100%);
}

//  Maps
//  ---------------------------------------------

// merge maps (add values, override values -> alias for 'map-merge')
@function add($override, $original) {
  @if ($override != false and $original != false) {
    @return map-merge($original, $override);
  }
  $original: ();
  @return $original;
}

// get value from map
@function get($map, $key) {
  @if ($key == '' or $key == null or $key == false) {
    @return map-values($map);
  }
  @return map-get($map, $key);
}

@function empty-map($x: x) {
  @return map-remove(($x:$x), $x);
}

@function map-new() {
	@return map-remove((), 'key');
}

@function map-deep-merge($map1: (), $map2: ()) {
  @if ($map1 == false) {
    @return 'false';
  }

	@if (type-of($map1) == 'list' and length($map1) == 0) or
		(type-of($map1) == 'null') or ($map1 == null)
	{
		$map1: map-new();
	}

	@if (type-of($map1) != map) {
    @debug $map1;
		@error ('argument `$map1` of `map-deep-merge($map1, $map2)` must be a map');
	}

  @if ($map2 == false) {
    @return 'false';
  }

	@if (type-of($map2) == 'list' and length($map2) == 0) or
		(type-of($map2) == 'null') or ($map2 == null)
	{
		$map2: map-new();
	}

	@if (type-of($map2) != map) {
		@error ('argument `$map2` of `map-deep-merge($map1, $map2)` must be a map');
	}

	$newMap: $map1;

	@if (map-get($map2, merge) != false) {
		@each $key, $value in $map2 {
			@if (type-of($value) == map) {
				$newMap: map-merge(
					$newMap,
					(
						$key: map-deep-merge(map-get($newMap, $key), $value),
					)
				);
			} @else {
				$newMap: map-merge(
					$newMap,
					(
						$key: $value,
					)
				);
			}
		}

		@return $newMap;
	}

	@return $map2;
}